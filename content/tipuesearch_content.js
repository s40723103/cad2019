var tipuesearch = {"pages": [{'title': 'About', 'text': '此內容管理系統以\xa0 https://github.com/mdecourse/cmsimde \xa0作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作. \n 利用 cmsimde 建立靜態網誌方法: \n 1. 在 github 建立倉儲, git clone 到近端 \n 2. 參考\xa0 https://github.com/mdecourse/newcms , 加入除了 cmsimde 目錄外的所有內容 \n 以 git submodule add\xa0 https://github.com/mdecourse/cmsimde \xa0cmsimde \n 建立 cmsimde 目錄, 並從 github 取下子模組內容. \n 3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器. \n 動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端. \n 4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行: \n git clone --recurse-submodules \xa0 https://github.com/mdecourse/newcms.git \n', 'tags': '', 'url': 'About.html'}, {'title': '處理錯誤程序', 'text': 'Q 當倉儲git pull+分組倉儲網址後發現無法正常開啟近端 \n A : 將倉儲start鍵放入文字編輯器並且查看，發現有多一個分號（：），將分號刪除並儲存後即可進入近端。 \n RESEASON 原因 ： 因為有人倉儲本身是壞的，因此當其他人gitpull時會讓他人倉儲錯誤，造成倉儲近端損毀。 \n Before \n \n After \n \n Q 為什麼用了git pull 分組倉儲網址完無法正確連結完成並進行改 \n A: \n 先將倉儲中最新版本反向拉回（左為本身，右為管理者）並且git commit git push上去後再次進入近端即可改為最新版本進行改版推送 \n EX: \n \n RESEASON (原因 ): 有可能因為尚未推送回分組倉儲使最新版本與自身隨身碟中可攜系統舊版沒有連結成功，因此git pull 分組倉儲網址完進入近端才會還是舊版 \n Q 為什麼管理員merge完會使倉儲爆掉，產生舊版與新版衝突(如下) \n \n A: \n 在這次解決問題中，由於近端未有衝突問題並且使用正常，進入近端按下轉靜態後再次git push上傳即可恢復網頁 \n RESEASON (原因 ): \n 有可能是因為其中一位倉儲推送上去使用到git pull的緣故使得新舊版產生合併問題，造成有兩個版面的緣由 \n Q 進入近端卻直接跳下一行並沒有做任何作動 \n EX: \n D:\\87\\cmsimde>python wsgi.py \n D:\\87\\cmsimde> \n A: \n 將啟動程式按鍵(start_mdecourse.bat)拖曳到SciTe裡，並將裡面其中一行程式多餘的開頭程式 %path% 刪除，重新啟動(按下Stop.bat)即可恢復正常。 \n \n 如上圖所示，但前面的 %path%以更改完畢，因此範例中的程式是已經改善完畢的。 \n RESEASON(原因 ): \n 因為%path%為進入近端之bug，需查看是否修正完畢。 \n', 'tags': '', 'url': '處理錯誤程序.html'}, {'title': 'webots', 'text': '\n \n \n', 'tags': '', 'url': 'webots.html'}, {'title': 'Develop', 'text': 'https://github.com/mdecourse/cmsimde \xa0的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443\xa0就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容. \n cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版. \n init.py 位於\xa0 up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數. \n', 'tags': '', 'url': 'Develop.html'}, {'title': '每週練習內容', 'text': '', 'tags': '', 'url': '每週練習內容.html'}, {'title': 'Week2', 'text': '課程內容說明、亂數分組、建立各學員網站 \n What is電腦輔助機械設計: \n \n \n 以電腦協助創建、修改、分析或最佳化機械設計 \n 何謂機械設計? \n 固體流體與軟體元件巧妙結合, 達成特定目的 \n 設計 - 權衡約束條件後所完成的安排及表達 \n 設計的目的在尋求目標達成的最合理安排 \n 電腦輔助機械設計的目的在求價值最大化 \n \n 課程目標 \n \n \n 了解何謂電腦輔助機械設計? \n 鼓勵使用合法的教育版 CAD 套件 \n 鼓勵自行開發電腦輔助設計程式 \n 透過分組執行專案, 學習協同設計 \n 透過網站的維護, 學習網際內容管理 \n 透過字幕影片錄製, 學習口語文字表達 \n \n 以下為亂數分組名單網址: \n http://mde.tw/cad2019/content/%E5%88%86%E7%B5%84%E5%90%8D%E5%96%AE.html \n 成員: \n 40523113\xa0吳宜賢 \n 40623252 李展齊 \n 40723101 沈易萱 \n 40723103 林晏瑩 \n 40723107 王晨佑 \n 40723114 杜永瀚 \n 40723119 林哲緯 \n 40723122 施東勝 \n 40723124 徐敬倫 \n 40723125 張詠全 \n 40723152 陳俊任 \n 40723155 吳明峰 \n \n \n', 'tags': '', 'url': 'Week2.html'}, {'title': 'Week3', 'text': '任務一 Solvespace 編譯與參數繪圖應用說明 \n', 'tags': '', 'url': 'Week3.html'}, {'title': 'Week5', 'text': 'Solvespace 編譯與參數繪圖示範 \n \n', 'tags': '', 'url': 'Week5.html'}, {'title': 'Week6', 'text': '\xa0V-rep 網際雙輪車控制模擬示範 \n', 'tags': '', 'url': 'Week6.html'}, {'title': 'Week7', 'text': '網站統一架構，Solvespace編譯與繪圖驗證 \n 1.分組網站規格統一 \n \n 2.solvespace編譯操作證明 \n \n 並 將solvespace將adout的version版本後加上this\xa0solvespace is compiled\xa0 by\xa0 40723103 \n 步驟1 .先查詢GPL關鍵字找到該文件 \n \n 步驟2. 最後在SciTe裡找到該程式碼(大約坐落在952行)並加上 this\xa0 solvespace is compiled\xa0 by\xa0 40723103證明有編譯過。 \n 3.Solvespace操作 \n', 'tags': '', 'url': 'Week7.html'}, {'title': 'Week8', 'text': 'Leo 設定網址路徑和名稱 \n step1. \n 打開D槽中自己倉儲的config裡pelican.leo的檔案(在Leo\xa0裡開啟)，另外再打開Y槽tmp裡的cp2019/config/pelican.leo裡 \n 在Leo裡將cp2019的編輯tamplate/@path theme/...底下@edit base的程式全部複製並貼上在相同位置的自己的倉儲pelican.leo裡，之後做儲存 \n \xa0 \n step2. \n Leo中共用裡@edit\xa0 pelicanconf.py 修改 \n AUTHOR =自己學號 \n SITENAME =cad2019學號 \n step3. \n Leo中遠端裡@edit publishconf.py修改 \n 1. SITEURL =https://倉儲帳號.github.io/cad2019/blog \n 2. DISQUS_SITENAME =Disqus名稱 \n 註:指令ctrl+I=為一個節點，意思是增加一個檔案 \n 以下為範例影片與更改所在位置 \n \n \n', 'tags': '', 'url': 'Week8.html'}, {'title': 'Week9', 'text': '期中報告繳交 \n 期中影片需有 浮水印 \n 期中blog成品展現 \n \n blog網誌網址: \n https://s40723103.github.io/cad2019/blog/index.html \n', 'tags': '', 'url': 'Week9.html'}, {'title': 'Week10-11', 'text': 'fork組別並推送資料pull request 給組長(管理者) \n 分別翻譯電子書之內容，依序NX\xa0 \xa0Solid work\xa0\xa0 inventor\xa0\xa0Creo(proe)=oneshape\xa0逐一寫出軟體特性與分析之間的差異性。 \n ntroduction Pull request \n 正反向拉回差別在於資料傳遞的方向。 \n 假設是正向拉回，是 組員(無權限)將資料推送回組別倉儲後給組長(管理員)確認資料後使其合併 。 \n 反之，反向拉回是 管理者將權限給予組員讓他們擁有可merge的權力 ，不過在這邊很常因為組員推送問題產生衝突，並且解決方式較為繁瑣，因此這學期並不推薦使用反向拉回的方式管理組別倉儲。 \n 以下為正向拉回範例: \n step1 \n \n 先點入自己分組倉儲之pull request，出現畫面為(圖1) \n \n 這時出現merge問題，但仍可以pull request，並按下Create \n pull request之按鍵 \n step2 確認完再按下標題與傳遞內容後再按下 Create  pull request \n step3 出現畫面代表衝突檔案，需由管理員(組長)確認資料並合併之後處理衝突版面並再次推送， 藉此merge完成 \n \xa0 \n \xa0', 'tags': '', 'url': 'Week10-11.html'}, {'title': 'Week12', 'text': '\n 網址: https://www.youtube.com/watch?v=tgTjdzZdQTk \n 心得: \n 對於剛接觸兩款軟體的新手而言， NX12 為接受度較高的高階套件，模擬與加工程序與應力分析和繪製3D草圖為該套件之特色，並且指令相對於簡潔明瞭，運用在繪製草圖或是物件分析的部分都做得相對周到，儘管模擬加工方面之限制比較多之外，整體操作上較為順手。 \n 另一方面 Webots 主要為3D模擬套件，實際使用物體去模擬移動位置，可變換出不同場景已供參考，在設定操作步驟方面相對繁瑣，而測試機器人與機械傳動件作動為該套件主要特性，也可指定對象的圖形和物理屬性。 \n 註 :圖形屬性包括對象的形狀，尺寸，位置和方向，顏色和紋理。 \n 結論: 兩者套件比較下，個人偏向使用NX操作，因操作明瞭標示明顯，各指令也會給予相對詳細的解說，是新手也能操作順手的軟體。 \n \xa0 \n 第十二週筆記 : \n 利用webots(開放式)和v-rep(無開放檔案格式) \n 運用: \n nx12=可二次開發 \n nx3無開發 \n webots:有五種程式可運用，ex:C、C++、Python、Java、MATLAB，為零組件組合軟件。 \n 註解:建立模型孔需有間隙(SOLVESPACE)，因轉出零件檔案(零件件數有多少，就轉多少次)，再轉入WEBOTS。 \n 目前因WEBOTS還是商用化，因此檔案仍停留在1999年。 \n \n', 'tags': '', 'url': 'Week12.html'}, {'title': 'Week13', 'text': '第13週-Solvespace 與 NX12 參數繪圖與 V-rep 結合應用 \n 重點筆記: 講解NX3與NX12之間特性、差異 \n NX3 使用輸出VRML[選VRML2.0，轉入Webots(副檔名.wrl)] 並勾選選項 1.output lights 2.output matenals 3.recursive multi file 註 : 1.imput VRML為Webots打開之檔案類型 2.solvespace無法轉成wrl檔 3.wrl檔為文字檔 NX12 重要檔案 1.NXASSEMBLY(作用為轉檔)=IGES也是轉檔 2.NXBIN 3.UGII 註: 1.Journal=畫圖中並同時儲存 比較差異 \n NX3 =較陽春，但簡便，可執行放在UGII檔裡 \n NX12 =規格、功能性相對齊全，但為了配合Windows 7之後的升級改版，直接將大部分檔案放在NXBIN裡，不過有些重要檔案仍儲存在UGII裡。 \n HOW TO\xa0將NX12程式語言改成Python \n A : \n 改寫位置之操作順序: File>Preferences>User interface>Tools \n 原先Journal language中將Visual Basic選項改為Python選項 \n 目的: 主要方面日後藉由程式去操作NX12 \n', 'tags': '', 'url': 'Week13.html'}, {'title': 'Week14', 'text': '任務 : \n 同步 啟動跨組自評與互評機制 , 並針對課程內容所要求的任務要項逐一查驗各組員學習成效, 希望在鼓勵組員公開倉儲內容與教學影片互相學習之餘, 也能達到公平計分的目的，同時也強制性規定需作筆記。 \n 在第十四週也逐步介紹NX、Solvespace、Webots的執行與互動 \n Q.如何用SciTe執行Python，與 NX、Solvespace、Webots互動 \n A: 程式由外部控制虛擬、實體(大略贅述，詳情敘述只紀錄關鍵字) \n 片刻紀錄 : \n 1 .關鍵字:nx run journal=用python執行，但沒跑出原始碼。 \n 2 .需放Download裡(只是demo)=可直接給路徑<path:path>名稱(yrl.學號)，使學號在路徑連結。 \n 3.cmsimde@...=為release轉出版本，會改變數字。 \n', 'tags': '', 'url': 'Week14.html'}, {'title': 'Week15', 'text': '\n 在這6週裡學到了關於nx、solvespace、webots、solidwork、v-rep相關知識，也了解老師為何都只上一些就跳到下一個步驟，就是為了先讓學生自行產生興趣再去自行學習，儘管如此，龐大的資訊量與軟件相關設定步驟等等諸如此類的東西在整理筆記時也重新審視這一週的收穫，操作影片過程有時也會遇到指令看不懂與操作失誤的部分，同時也累積自身學習體驗的經歷，整體來說，是收穫不少，可能因時間倉促的因素讓進度的步調顯得有些快，不過也讓人印象深刻。 \n', 'tags': '', 'url': 'Week15.html'}, {'title': 'Week16', 'text': '這是繪圖過程 之後有轉出到v-tep \n 心得: \n 在一開始畫零件時腦袋一片空白，當下知道要考試有點慌張，而後又遇到指令的問題，這過程中與時間賽跑出充滿緊張與刺激感，最耨終於把成品做出，雖然圖文不符感到很抱歉，但在時間有限的課程裡，這是我盡量做出的成果，也了解匯出的應用是多麼重要的部分。 \n', 'tags': '', 'url': 'Week16.html'}, {'title': 'Week17', 'text': '書本翻譯: \n 分配內容=WEBOTS前半段 \n Webots User Guide 翻譯: 用戶指南手冊 \n Tutorial 2: Modification of the Environment (30 Minutes) In this tutorial, we will teach you how to create simple objects in the environment. The first step will be to create a ball which will interact with the environment. We will tackle several concepts related to the nodes: what is their meaning, how to create them, how they have to be affiliated, etc. Moreover we will see how to set up physics. \n Several kinds of nodes will be introduced. Their detailed definition can be found in Reference Manual. Having the nodes chart diagram in front of you, will also help understanding the nodes inheritance relationship. \n 翻譯: 教程2：修改環境（30分鐘） 教學如何在環境中創建雛形。第一步將創建一個與環境互動的球。我們將處理與節點有關的幾個概念：如何創建它們、如何關聯它們等等。 此外，還需將了解如何設置物理學。 \n 以下將介紹幾種節點。詳細定義可在參考手冊中找到。擁有節點圖表，也將助於理解節點繼承關係。 \n Index A New Simulation Modifying the Floor The Solid Node Create a Ball Geometries DEF-USE Mechanism Add Walls Solution: World File Efficiency Conclusion \n 翻譯: \n 索引 新建模擬 修改地板 節點 創建球體 幾何形狀 定義使用機制 添加牆 解決方案：世界文件 效率 結論 \n \n A New Simulation First we create a new simulation based on the one created in Tutorial 1. \n Hands-on #1: Make sure the my_first_simulation.wbt world file is open, and that the simulation is paused and is at a virtual time of 0. Using the File / Save World As... menu, save the simulation as obstacles.wbt. \n 翻譯: 新建模擬 首先根據教程1中創建的模擬創建一個新的模擬。 \n 步驟1：確保打開了my_first_simulation.wbt文件，並且模擬已暫停並且處於虛擬時間0。使用“文件/另存世界為...”菜單，保存the simulation為obstacles.wbt。 \n \n Modifying the Floor The default RectangleArena PROTO defines a simple floor pinned on the static environment, i.e. without Physics node, and surrounded by walls. Other pre-built floors are available in the Webots objects library. We will now delete the RectangleArena node and add a simple floor that we will manually surround with walls later in this tutorial. \n Hands-on #2: To remove the RectangleArena, select it either in the 3D view or in the scene tree view with a left click and press the Delete key on your keyboard. Alternatively, you can right click on it in the 3D view and select Delete in the context menu (you can also use the context menu directly in the scene tree view). Select the TexturedBackroundLight node and click on the Add button. In the open dialog box, and choose PROTO nodes (Webots Projects) / objects / floors / Floor (Solid). \n The newly added Floor PROTO has a default size of 10mx10m, but it is possible to adjust its size, its position and texture by changing the corresponding fields. \n Hands-on #3: In the scene tree view select and expand the Floor. Modify the size field and set it to {1, 1} to resize it to 1mx1m. \n 翻譯: 修改地板 默認的RectangleArena PROTO定義一個固定在靜態環境上的Floor，即沒有Physics節點並且被牆壁包圍。 Webots對像庫中提供了其他預建樓層。現在，我們將刪除RectangleArena節點，並添加一個簡單的Floor，在本教程的後面部分將用牆手動將其包圍。 \n 步驟2：要刪除RectangleArena，在3D視圖或場景樹視圖中單擊鼠標左鍵選重物件，然後按下Delete鍵。 或者，可以在3D視圖中右鍵單擊它，然後在上下文菜單中選擇“刪除”（也可以直接在場景樹視圖中使用上下文菜單）。 選擇TexturedBackroundLight節點，然後單擊“添加”按鈕。 在打開的對話框中，然後選擇PROTO節點（Webots項目）/對象/ Floors / Floor（實心）。 \n 增添新的Floor PROTO的尺寸為10mx10m，也可以通過更改相應的字段來調整其大小，位置和紋理。 \n 步驟3：在場景樹視圖中，選擇並展開“Floor”。修改大小字段並將其設置為{1，1}以將其大小調整為1mx1m。 \n \n The Solid Node \n This subsection introduces the most important base node in Webots: the Solid node, from which many other nodes derive. \n A Solid node represents a rigid body, that is a body in which deformation can be neglected. The distance between any two given points of a rigid body remains constant in time regardless of external forces exerted on it. For example a table, a robot finger phalanx or a wheel are rigid bodies. Soft bodies and articulated objects are not rigid bodies. For example, a rope, a tire, a sponge or an articulated robot arm are not rigid bodies. However, an articulated entity can be broken into several rigid bodies. \n The physics engine of Webots is designed for simulating rigid bodies only. An important step, when designing a simulation, is to break up the various entities into separate rigid bodies. \n To define a rigid body, you will have to create a Solid node. Inside this node you will set up different sub-nodes corresponding to the characteristics of the rigid body. The following figure depicts a rigid body and its sub-nodes. The graphical representation of the Solid node is defined by the Shape nodes populating its children list. The collision bounds are defined in its boundingObject field. The graphical representation and the collision shape are often but not necessarily identical. Finally, the physics field defines if the object belongs to the dynamical or to the static environment. All these sub-nodes are optional, but the physics field needs the boundingObject to be defined. \n The Geometry box (in this figure) stands for any kind of geometrical primitive. In fact, it can be substituted by a Sphere, a Box, a Cylinder, etc. \n 翻譯: \n 節點 這部分介紹了Webots中的基礎節點：Solid節點，許多其他節點都來自Solid節點。 \n 實體節點表示剛體，即可以忽略變形的剛體。 剛體上任意兩個給定點之間的距離在時間上保持恆定，而不管施加在其上的外力如何。 例如，桌子，機械手指骨或輪子是剛體。 軟體和關節物體不是剛體。 例如，繩索，輪胎，海綿或關節式機械臂不是剛性體。 可將一個鉸接的實體分解為幾個剛體。 \n Webots的物理引擎僅設計用於模擬剛體。設計仿真時，重要的一步是將各個實體分解為單獨的剛體。 \n 要定義剛體，必須先創建一個節點。在此節點內，將根據剛體的特性設置不同的子節點。下圖描繪了剛體及其子節點。實體節點的圖形表示由填充其子級列表的Shape節點定義。碰撞範圍在其boundingObject字段中定義。圖形表示和碰撞形狀通常但不一定相同。最後，物理字段定義對像是屬於動態環境還是屬於靜態環境。所有這些子節點都是可選的，但物理場需要定義boundingObject。 \n 幾何框代表任何類型的幾何圖元。 實際上，它可以用球體，盒子，圓柱體等代替。 \n \n Create a Ball \n We will now add a ball to the simulation. That ball will be modeled as a rigid body as shown in this figure. A Sphere node will be used to define the geometry of our ball. \n Hands-on #4: In the scene tree view, select the last node and press the Add button. In the dialog, open the Bases nodes section and select the Solid node. In the scene tree view, expand the Solid node and select its children field. Add a Shape node to it by using the Add button. Select the appearance field of the Shape node and use the Add button to add a PBRAppearance node. \n Add a Sphere node as the geometry field of the newly created Shape node. Expand the PBRAppearance node and change its metalness field to 0 and its roughness field to 1. Add another Sphere node to the boundingObject field of the Solid. Finally add a Physics node to the physics field of the Solid. By modifying the translation field of the Solid node, place the ball in front of the robot (at {0, 0.2, -0.2} for example). Save the simulation. The result is depicted in this figure. tutorial_ball.png Your first rigid body in Webots. When the simulation is started, the ball hits the floor. You can move the ball by applying a force to it (Ctrl + Alt + left-click + drag). The contact points between the ball and the floor can be displayed as cyan lines by enabling the View / Optional Rendering / Show Contact Points menu item. \n 翻譯: 創建球體 將球添加到模擬中。如圖所示，該球將被建模為剛體。球體節點將用於定義球的幾何形狀。 \n 步驟4：在場景樹視圖中，選擇最後一個節點，然後按“添加”按鈕。在對話框中，打開“基礎節點”部分，然後選擇“實體”節點。在場景樹視圖中，展開“實體”節點並選擇其子字段。使用“添加”按鈕向其添加一個Shape節點。選擇“形狀”節點的外觀字段，然後使用“添加”按鈕添加一個PBRAppearance節點。 \n 將球體節點添加為新創建的形狀節點的幾何字段。 展開PBRAppearance節點，並將其金屬性字段更改為0，並將其粗糙度字段更改為1。 將另一個Sphere節點添加到Solid的boundingObject字段。 最後，將一個Physics節點添加到Solid的Physical字段。 通過修改實體節點的平移字段，將球放置在機器人的前面（例如，在{0，0.2，-0.2}處）。 保存模擬。 結果如圖所示。 tutorial_ball.png Webots中的第一個剛體。 當模擬開始時，球擊中地板。可通過向球施加力來移動球（Ctrl + Alt +左鍵單擊+拖動）。 \n 通過啟用“查看/可選渲染/顯示接觸點”菜單項，可以將球和地板之間的接觸點顯示為青色線。 \n Geometries To define the ball, we used the Sphere node in two different contexts: for the graphical representation (children) and to define the physical bounds (boundingObject). All Geometry nodes (such as the Sphere node) can be used in a graphical context. However, only a subset of them can be used in a physical context. The nodes chart diagram indicates which nodes are supported in each context. \n We are now going to reduce the size of the Sphere and increase its graphical quality by increasing the number of triangles used to represent it. \n Hands-on #5: For each Sphere node defining the ball, set its radius field to 0.05 and its subdivision field to 2. Refer to the Reference Manual to understand what the subdivision field stands for. \n 翻譯: \n 幾何形狀 為了定義球，在兩個不同的上下文中使用了Sphere節點：用於圖形表示（子代）和定義物理邊界（boundingObject）。 使得Geometry節點（例如Sphere節點）都可以在圖形上下文中使用。但它們的子集只能在物理環境中使用。 節點圖表顯示了每個上下文中支持哪些節點。 \n 將通過增加用於表示球體的三角形的數量來減小球體的大小並提高其圖形質量。 \n 步驟5：對於定義球的每個Sphere節點，將其半徑字段設置為0.05，並將其細分字段設置為2。 \n 請參閱《參考手冊》以了解細分字段的含義。 \n', 'tags': '', 'url': 'Week17.html'}, {'title': 'week17-1', 'text': '\n 過程中遇到設限 \n \n 最後轉出到v-rep時會變成翻倒狀 \n \n \n \n \n 心得: \n 在這一次的繪圖過程，阻礙滿滿，也很常繪圖到一半就錯誤然後必須刪除草圖，最後在時間下，硬是畫到一半而已，希望下次的考試能順手，也希望錯誤不要這麼多。', 'tags': '', 'url': 'week17-1.html'}]};